/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package bip32ed25519

import cash.z.ecc.android.bip39.Mnemonics.MnemonicCode
import kotlin.collections.component1
import kotlin.test.Test

fun helperStringToByteArray(input: String): ByteArray {
    return input.split(",").map { it.trim().toInt() }.toIntArray().map { it.toByte() }.toByteArray()
}

val seedArray =
        helperStringToByteArray(
                "58,255,45,180,22,184,149,236,60,249,164,248,209,233,112,188,152,25,146,14,123,244,74,94,53,4,119,175,14,245,87,177,81,27,9,134,222,191,120,221,56,199,197,32,205,68,255,124,114,49,97,143,149,142,33,239,2,80,115,58,140,25,21,234"
        )

class ContextualApiCryptoTest {

    @Test
    fun lazySodiumInitNoErrorsTest() {
        ContextualApiCrypto(seedArray)
    }

    @Test
    fun fromSeedTest() {
        val c = ContextualApiCrypto(seedArray)

        // 58,255,45,180,22,184,149,236,60,249,164,248,209,233,112,188,152,25,146,14,123,244,74,94,53,4,119,175,14,245,87,177,81,27,9,134,222,191,120,221,56,199,197,32,205,68,255,124,114,49,97,143,149,142,33,239,2,80,115,58,140,25,21,234

        //////////
        val seed =
                MnemonicCode(
                        "salon zoo engage submit smile frost later decide wing sight chaos renew lizard rely canal coral scene hobby scare step bus leaf tobacco slice".toCharArray()
                )
        // for (i in seed.toEntropy().asList()) {
        //     print("${i} ")
        // }
        // TODO:
        // For the seed above, the entropy is:
        // -66,-97,-3,41,108,12,-54,-70,-33,81,-58,-5,-71,4,-103,91,24,45,106,-56,65,-127,-64,-115,-117,1,106,-79,-18,-3,120,-50]
        // However, in the typescript tests, what's passed into fromSeed function is the array
        // below. So how do we go from entropy above the value below?
        //////////

        val rootKey =
                c.fromSeed(seedArray) // Need to figure out how to go from phrase/entropy to that
        val fromSeedExpectedOutput =
                helperStringToByteArray(
                        "168,186,128,2,137,34,217,252,250,5,92,120,174,222,85,181,197,117,188,216,213,165,49,104,237,244,95,54,217,236,143,70,148,89,43,75,200,146,144,117,131,226,38,105,236,223,27,4,9,169,243,189,85,73,242,221,117,27,81,54,9,9,205,5,121,107,146,6,236,48,225,66,233,75,121,10,152,128,91,249,153,4,43,85,4,105,99,23,78,230,206,226,208,55,89,70"
                )

        assert(rootKey.contentEquals(fromSeedExpectedOutput)) {
            "rootKey and fromSeedExpectedOutput are not equal"
        }

        // var entropyJVMInt = seed.toEntropy().asList()
        // print("entropyJVMInt: $entropyJVMInt\n")
    }

    @Test
    fun deriveKeyTest() {
        val c = ContextualApiCrypto(seedArray)

        val expectedKeyOutput =
                helperStringToByteArray(
                        "98,254,131,43,122,209,5,68,190,131,55,166,112,67,94,80,100,174,74,102,231,123,215,137,9,118,91,70,181,118,166,243"
                )

        val derivedPrivate = c.keyGen(KeyContext.Address, 0, 0)

        expectedKeyOutput.forEach { print("$it,") }
        print("\n\n\n")
        derivedPrivate.forEach { print("$it,") }

        assert(derivedPrivate.contentEquals(expectedKeyOutput)) {
            "derivedPrivate and expectedKeyOutput are not equal"
        }
    }
}
